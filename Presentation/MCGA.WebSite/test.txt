BUSCADOR::: jquery 1.12.4

public JsonResult GetDias(string Areas, string term = "")
        {
            var lista = db.getProfesionales().Where(o => o.Nombre.Contains(term)).OrderBy(o => o.Id).ToList();
            return Json(lista, JsonRequestBehavior.AllowGet);
        }
		
		
		
<div class="_form-horizontal">
    <div class="form-group">
        <label for="NombreName" class="control-label col-md-2">Nombre</label>
        <div class="col-md-10">
            <input class="form-control text-box single-line" data-val="true" data-val-required="Requerido" id="NombreName" name="NombreName" type="text" value="" placeholder="Ingrese nombre"/>
            <span class="field-validation-valid text-danger" data-valmsg-for="NombreName" data-valmsg-replace="true"></span>
        </div>
    </div>

    <div class="form-group">
        <label for="ProfesionalId" class="control-label col-md-2">Profesional Id</label>
        <div class="col-md-10">
            <input class="form-control text-box single-line" id="ProfesionalId" type="text" readonly="readonly"/>
        </div>
    </div>
</div>




using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

namespace MCGA.Entities
{
    [MetadataType(typeof(ProfesionalMetadata))]
    public partial class Profesional
    {
        public class ProfesionalMetadata
        {
           [Required(ErrorMessage ="Requerido")]
            public string Nombre { get; set; }
            [Required(ErrorMessage = "Requerido")]
            public string Apellido { get; set; }
            [Phone]
            public string Telefono { get; set; }
            [EmailAddress]
            [DisplayName("Correo")]
            public string Email { get; set; }
           
        }
    }
}

PagedList::::

@using (Html.BeginForm("List", "Profesional", FormMethod.Get))
{
    <p>
        @Html.TextBox("SearchString", ViewBag.CurrentFilter as string,
       new {@class="form-control text-box single-line",
           autocomplete = "off",
           placeholder="Ingrese nombre",
           style="width:350px; display: inline-block;"
       })
        <input type="submit" value="Buscar" class="btn btn-info" />
    </p>
}

public ActionResult List(string currentFilter, string searchString, int? page)
        {
            if (searchString != null)
                page = 1;
            else
                searchString = currentFilter;
            ViewBag.CurrentFilter = searchString;
            IEnumerable<Profesional> pros = db.getProfesionales();
            if (!string.IsNullOrEmpty(searchString))
            {
                pros = pros.Where(s => s.Nombre.ToLower().Contains(searchString.ToLower()));
            }
            pros = pros.OrderBy(s => s.Id);
            int pageSize = 3;
            int pageNumber = (page ?? 1);
            return View(pros.ToPagedList(pageNumber, pageSize));
        }
		
despues del table:::
Pagina @(Model.PageCount < Model.PageNumber ? 0:Model.PageNumber) de @Model.PageCount
@Html.PagedListPager(Model, page => Url.Action("List", new { page, sortOrder=ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter}))







TAGGEADO; Boilerplate.Web.Mvc5 (1.0.25)
WEB CONFIG::: 
<add namespace="Boilerplate.Web.Mvc" />
        <add namespace="Boilerplate.Web.Mvc.OpenGraph" />
        <add namespace="Boilerplate.Web.Mvc.Twitter" />
		
constante;;;
public class Application
    {
        public const string Name = "Clinica de embazos";
        public const string ShortName = "Clinica";
        public const int SeoDescriptionLength = 260;
        public const string Email = "info@cardio.com";
        public const string Phone = "(+91 123) 4567 789";
        public const string StreetAddress = "Wakanda 32";
        public const string Locality = "Asgard";
        public const string PostalCode = "1251";
        public const string Country = "Argentina";

        public const double Latitude = -69.667308627965596;
        public const double Longitude = -34.49549933992794;

        public static string Url => HttpContext.Current.Request.Url.AbsoluteUri;
    }
	
	
	
	
	
	
	
	
	
	@using MCGA.WebSite.Constants.ProfesionalController
@model IEnumerable<MCGA.Entities.Profesional>
@{
    ViewBag.Title = "Indice";
    ViewBag.Description = "Pagina principal para el ABM de profesionales";
    ViewBag.Author = Application.Name;
    ViewBag.ReferrerMode = ReferrerMode.OriginWhenCrossOrigin;
    ViewBag.TwitterCard = new SummaryLargeImageTwitterCard("@TwitterCard");
    ViewBag.OpenGraph = new OpenGraphBusiness(
        ViewBag.Title,
        new OpenGraphImage(Url.AbsoluteContent("~/images/logo.png")) { Height = 630, Type = ContentType.Png, Width = 1200 },
        new OpenGraphContactData(Application.StreetAddress, Application.Locality, Application.PostalCode, Application.Country)
        {
            Email = Application.Email,
            Phone = Application.Phone,
            Website = Url.AbsoluteRouteUrl(ProfesionalControllerRoute.GetDelete)
        },
        new OpenGraphLocation(Application.Latitude, Application.Longitude))
    {
        Determiner = OpenGraphDeterminer.Blank,
        SiteName = Application.Name
    };
}



	
ROUTEO:
//routes.IgnoreRoute("{resource}.axd/{*pathInfo}");
			// Improve SEO by stopping duplicate URL's due to case differences or trailing slashes.
			// See http://googlewebmastercentral.blogspot.co.uk/2010/04/to-slash-or-not-to-slash.html
			routes.AppendTrailingSlash = true;
			routes.LowercaseUrls = true;

			// IgnoreRoute - Tell the routing system to ignore certain routes for better performance.
			// Ignore .axd files.
			routes.IgnoreRoute("{resource}.axd/{*pathInfo}");
			// Ignore everything in the Content folder.
			routes.IgnoreRoute("Content/{*pathInfo}");
			// Ignore everything in the Scripts folder.
			routes.IgnoreRoute("Scripts/{*pathInfo}");
			// Ignore the Forbidden.html file.
			routes.IgnoreRoute("Error/Forbidden.html");
			// Ignore the GatewayTimeout.html file.
			routes.IgnoreRoute("Error/GatewayTimeout.html");
			// Ignore the ServiceUnavailable.html file.
			routes.IgnoreRoute("Error/ServiceUnavailable.html");
			// Ignore the humans.txt file.
			routes.IgnoreRoute("humans.txt");

			// Enable attribute routing.
			routes.MapMvcAttributeRoutes();

			routes.MapRoute(
				name: "Default",
				url: "{controller}/{action}/{id}",
				defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
			);
			
			
